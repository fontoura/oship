# -*- coding: utf-8 -*-
##############################################################################
# Copyright (c) 2007, Timothy W. Cook and Contributors. All rights reserved.
# Redistribution and use are governed by the license in OSHIP-LICENSE.txt
#
# Use and/or redistribution of this file assumes you have read and accepted the
# terms of the license.
##############################################################################

"""

The basic openEHR data types. From the data types specification Rev 2.1.0

"""

__author__  = 'Timothy Cook <timothywayne.cook@gmail.com>'
__docformat__ = 'plaintext'

from zope.interface import implements 
from zope.schema import Field,Bool 
from zope.i18nmessageid.message import MessageFactory 

from openehr.rm.datatypes.interfaces.basic import *

_ = MessageFactory('oship')

class DataValue(Field):
    """ 
    Abstract class. 
    Serves as a common ancestor of all data value types in openEHR models.
    """
    
    implements(IDataValue)

    pass

class DvBoolean(Bool):
    """ 
    Items which are truly boolean data, such as true/false or yes/no answers.
    For such data, it is important to devise the meanings (usually questions in subjec-
    tive data) carefully, so that the only allowed results are in fact true or false.
    The DV_BOOLEAN class should not be used as a replacement for naively modelled
    enumerated types such as male/female etc. Such values should be coded, and in
    any case the enumeration often has more than two values.  

    You cannot subclass bool() in Python.  The solution is to assign a private variable 
    with the bool() result of the value passed at instantiation.
    
    Example:
    
    >>>obj = DvBoolean(0)
    >>>obj._value
    >>>False
    
    """

    implements(IDvBoolean)

    def __init__(self, value):
        self.value=bool(value)
    

class DvState(DataValue):
    """
    For representing state values which obey a defined state machine, such as a vari-
    able representing the states of an instruction or care process.
    """

    implements(IDataValue)
    
    def __init__(self, value, isTerminal,**kwargs):
        if value != None and value != '' and isTerminal != None:
            self.value = unicode(value)
            self.isTerminal = bool(isTerminal)
        else:
            raise TypeError, "You must supply values for 'value' and 'isTerminal'."
        Field.__init__(self,**kwargs)


class DvIdentifier(DataValue):
    """
    Type for representing identifiers of real-world entities. Typical identifiers include
    drivers licence number, social security number, vertans affairs number, prescrip-
    tion id, order id, and so on.
    DV_IDENTIFIER is used to represent any identifier of a real thing, issued by
    some authority or agency.
    DV_IDENTIFIER is not used to express identifiers generated by the infrastruc-
    ture to refer to information items; the types OBJECT_ID and OBJECT_REF and
    subtypes are defined for this purpose.
    """

    implements(IDvIdentifier)
    
    def __init__(self, issuer, assignor, id, type,**kwargs):
        if issuer != None and issuer != '':
            self.issuer = unicode(issuer)
        else:
            raise AttributeError, "Invalid issuer value"
        
        if assignor != None and assignor != '':
            self.assignor = unicode(assignor)
        else:
            raise AttributeError, "Invalid assignor value"
        
        if id != None and id != '':
            self.id = unicode(id)
        else:
            raise AttributeError, "Invalid id value"

        if type != None and type != '':
            self.type = unicode(type)
        else:
            raise AttributeError, "Invalid type value"
        Field.__init__(self,**kwargs)
